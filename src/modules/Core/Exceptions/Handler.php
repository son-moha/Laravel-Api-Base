<?php

namespace Modules\Core\Exceptions;

use Modules\Core\Constants\AppConst;
use Modules\Core\Entities\Resources\Errors\Http\ForbiddenResponse;
use Modules\Core\Entities\Resources\Errors\Http\MethodNotAllowedResponse;
use Modules\Core\Entities\Resources\Errors\Http\NotFoundResponse;
use Modules\Core\Entities\Resources\Errors\Http\ServerErrorResponse;
use Modules\Core\Entities\Resources\Errors\Http\UnauthorizedResponse;
use Modules\Core\Entities\Resources\Errors\Http\UnprocessableEntityResponse;
use Illuminate\Contracts\Support\Responsable;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;
use Modules\Core\Constants\AppConst as ConstantsAppConst;
use Modules\Core\Entities\Resources\Errors\Http\TooManyRequestResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        //add Accept: application/json in request
        if ($request->wantsJson()) {
            $response = $this->handleApiException($request, $e);

            return $response instanceof Responsable ? $response->toResponse($request) : $response;
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    private function handleApiException($request, Throwable $exception)
    {
        $exception = $this->prepareException($exception);

        if ($exception instanceof HttpResponseException) {
            $exception = $exception->getResponse();
        }

        if ($exception instanceof \Illuminate\Auth\AuthenticationException) {
            $exception = $this->unauthenticated($request, $exception);
        }

        return $this->customApiResponse($exception);
    }

    private function customApiResponse($exception)
    {
        $statusCode = 200;

        if ($exception instanceof Response) {
            $statusCode = $exception->getStatusCode();
        }

        if ($exception instanceof AccessDeniedHttpException) {
            $statusCode = 401;
        }

        if ($exception instanceof UnauthorizedHttpException) {
            $statusCode = 403;
        }

        if ($exception instanceof NotFoundHttpException) {
            $statusCode = 404;
        }

        if ($exception instanceof ValidationException) {
            $statusCode = 422;
        }

        if (config('core.api_debug')) {
            $response['status']           = ConstantsAppConst::FAILED;
            $response['error']['message'] = ($statusCode == 500) ?
                trans('core::error.Whoops, looks like something went wrong') : $exception->getMessage();
            if ($exception instanceof ValidationException) {
                $response['error']['errors'] = $exception->errors();
            }
            $response['error']['instance'] = get_class($exception);
            $response['request']           = request()->all();

            Log::error(json_encode($response));

            return response()->json($response, $statusCode);
        }

        switch ($statusCode) {
            case 401:
                $response = new UnauthorizedResponse();
                break;
            case 403:
                $response = new ForbiddenResponse();
                break;
            case 404:
                $response = new NotFoundResponse();
                break;
            case 405:
                $response = new MethodNotAllowedResponse();
                break;
            case 422:
                $response['status'] = AppConst::FAILED;
                $response['error']['message'] = ($statusCode == 500) ?
                    trans('core::error.Whoops, looks like something went wrong') : $exception->getMessage();
                if ($exception instanceof ValidationException) {
                    $response['error']['errors'] = $exception->errors();
                }
                return response()->json($response, $statusCode);
//                $response = new UnprocessableEntityResponse();
//                break;
            case 429:
                $response = new TooManyRequestResponse();
                break;
            default:
                $message  = ($statusCode == 500) ?
                    trans('core::error.Whoops, looks like something went wrong') : $exception->getMessage();
                $response = new ServerErrorResponse($message);
                break;
        }

        return $response;
    }
}
